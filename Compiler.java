/* Generated By:JavaCC: Do not edit this line. Compiler.java */
import java.util.*;

public class Compiler implements CompilerConstants {
        public static ArrayList<SyntaxToken> tokenList = new ArrayList<SyntaxToken>();

        private static void printSuccess(){
                System.out.println("Input Parsed Successfully!");
        }

        private static void printTokens(){
                for(SyntaxToken tok : tokenList){
                        System.out.println(tok.toString());
                }
        }

        private static void printParseTree(){
                System.out.println("Not Yet Implemented");
        }

    // Run the parser
        public static void main ( String args [ ] ) {
                Compiler parser;
                boolean tokenBool = false;
                boolean parseTreeBool = false;
                boolean fileSet = false;
                String fileName = null;


                for(String s : args){
                        if(s.equals("-t")){
                                tokenBool = true;
                        } else if (s.equals("-pt")){
                                parseTreeBool = true;
                        } else if (!fileSet){
                                fileName = s;
                                fileSet = true;
                        } else {
                                System.out.println("Error: More than one file passed as argument.");
                                return;
                        }
                }

                //Mostly for easy debugging, may not be in final version
                if(!fileSet){
                        System.out.println("C Parser:  Reading from standard input . . .");
                        parser = new Compiler(System.in);
                }

                else if(fileSet){
                        System.out.println("C Parser:  Reading from file " + fileName + " . . ." );
                        try {
                                parser = new Compiler(new java.io.FileInputStream(fileName));
                        }
                        catch(java.io.FileNotFoundException e){
                                System.out.println("C Parser:  File " + args[0] + " not found.");
                                return;
                        }
                } else {
                        System.out.println("Compiler:  Usage is one of:");
                        System.out.println("         java Compiler [-t] [-pt] [fileName]");
                        return;
                }
                try {
                        parser.Program();
                        if(tokenBool){
                                printTokens();
                        }
                        if(parseTreeBool){
                                printParseTree();
                        }
                        System.out.println("Compiler:  C program parsed successfully.");
                }
                catch(ParseException e){
                        System.out.println("Compiler:  Encountered errors during parse.");
                        e.printStackTrace();
                }
        }

  static final public void Program() throws ParseException {
    label_1:
    while (true) {
      DeclarationList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case VOID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
         printSuccess();
  }

  static final public void DeclarationList() throws ParseException {
    label_2:
    while (true) {
      Declaration();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case VOID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
  }

  static final public void Declaration() throws ParseException {
    if (jj_2_1(2147483647)) {
      VarDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case VOID:
        FuncDeclaration();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void VarDeclaration() throws ParseException {
                         Token i; Token s;
    TypeSpecifier();
    i = jj_consume_token(IDENTIFIER);
    s = jj_consume_token(28);
                tokenList.add(new SyntaxToken("IDENTIFIER", i.image));
                tokenList.add(new SyntaxToken("SEMICOLON", s.image));
  }

  static final public void TypeSpecifier() throws ParseException {
                        Token i; Token v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      i = jj_consume_token(INT);
         tokenList.add(new SyntaxToken("TYPE_SPECIFIER", i.image));
      break;
    case VOID:
      v = jj_consume_token(VOID);
         tokenList.add(new SyntaxToken("TYPE_SPECIFIER", v.image));
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void FuncDeclaration() throws ParseException {
                          Token i; Token l; Token r;
    TypeSpecifier();
    i = jj_consume_token(IDENTIFIER);
    l = jj_consume_token(29);
    Params();
    r = jj_consume_token(30);
    CompoundStatement();
                tokenList.add(new SyntaxToken("IDENTIFIER", i.image));
                tokenList.add(new SyntaxToken("LPAREN", l.image));
                tokenList.add(new SyntaxToken("RPAREN", r.image));
  }

  static final public void Params() throws ParseException {
                 Token v;
    ParamList();
  }

  static final public void ParamList() throws ParseException {
                    Token c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case VOID:
      if (jj_2_2(2147483647)) {
        Param();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case VOID:
          Param();
          label_3:
          while (true) {
            c = jj_consume_token(31);
            Param();
         tokenList.add(new SyntaxToken("COMMA", c.image));
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 31:
              ;
              break;
            default:
              jj_la1[4] = jj_gen;
              break label_3;
            }
          }
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void Param() throws ParseException {
                Token i;
    TypeSpecifier();
    i = jj_consume_token(IDENTIFIER);
         tokenList.add(new SyntaxToken("IDENTIFIER", i.image));
  }

  static final public void CompoundStatement() throws ParseException {
                            Token l; Token r;
    l = jj_consume_token(32);
    LocalDeclarations();
    StatementList();
    r = jj_consume_token(33);
                tokenList.add(new SyntaxToken("LBRACKET", l.image));
                tokenList.add(new SyntaxToken("RBRACKET", r.image));
  }

  static final public void LocalDeclarations() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case VOID:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      VarDeclaration();
    }
  }

  static final public void StatementList() throws ParseException {
    label_5:
    while (true) {
      Statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case CONTINUE:
      case RETURN:
      case WHILE:
      case BREAK:
      case IF:
      case GOTO:
      case INT:
      case VOID:
      case IDENTIFIER:
      case 28:
      case 29:
      case 32:
      case 35:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
    }
  }

  static final public void Statement() throws ParseException {
    if (jj_2_3(2)) {
      LabeledStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case INT:
      case VOID:
      case IDENTIFIER:
      case 28:
      case 29:
      case 35:
        ExpressionStatement();
        break;
      case 32:
        CompoundStatement();
        break;
      case IF:
        SelectionStatement();
        break;
      case WHILE:
        IterationStatement();
        break;
      case CONTINUE:
      case RETURN:
      case BREAK:
      case GOTO:
        JumpStatement();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void LabeledStatement() throws ParseException {
                           Token i; Token c;
    i = jj_consume_token(IDENTIFIER);
    c = jj_consume_token(34);
    Statement();
                tokenList.add(new SyntaxToken("IDENTIFIER", i.image));
                tokenList.add(new SyntaxToken("COLON", c.image));
  }

  static final public void ExpressionStatement() throws ParseException {
                              Token s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case INT:
    case VOID:
    case IDENTIFIER:
    case 29:
    case 35:
      Expression();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    s = jj_consume_token(28);
         tokenList.add(new SyntaxToken("SEMICOLON", s.image));
  }

  static final public void SelectionStatement() throws ParseException {
                             Token i; Token l; Token r; Token e;
    i = jj_consume_token(IF);
    l = jj_consume_token(29);
    Expression();
    r = jj_consume_token(30);
    Statement();
                tokenList.add(new SyntaxToken("IF", i.image));
                tokenList.add(new SyntaxToken("LPAREN", l.image));
                tokenList.add(new SyntaxToken("RPAREN", r.image));
    if (jj_2_4(2)) {
      e = jj_consume_token(ELSE);
      Statement();
         tokenList.add(new SyntaxToken("ELSE", e.image));
    } else {
      ;
    }
  }

  static final public void IterationStatement() throws ParseException {
                             Token w; Token l; Token r;
    w = jj_consume_token(WHILE);
    l = jj_consume_token(29);
    Expression();
    r = jj_consume_token(30);
    Statement();
                tokenList.add(new SyntaxToken("WHILE", w.image));
                tokenList.add(new SyntaxToken("LPAREN", l.image));
                tokenList.add(new SyntaxToken("RPAREN", r.image));
  }

  static final public void JumpStatement() throws ParseException {
                        Token t; Token id; Token s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GOTO:
      t = jj_consume_token(GOTO);
      id = jj_consume_token(IDENTIFIER);
      s = jj_consume_token(28);
                tokenList.add(new SyntaxToken("GOTO", t.image));
                tokenList.add(new SyntaxToken("IDENTIFIER", id.image));
                tokenList.add(new SyntaxToken("SEMICOLON", s.image));
      break;
    case CONTINUE:
      t = jj_consume_token(CONTINUE);
      s = jj_consume_token(28);
                tokenList.add(new SyntaxToken("CONTINUE", t.image));
                tokenList.add(new SyntaxToken("SEMICOLON", s.image));
      break;
    case BREAK:
      t = jj_consume_token(BREAK);
      s = jj_consume_token(28);
                tokenList.add(new SyntaxToken("BREAK", t.image));
                tokenList.add(new SyntaxToken("SEMICOLON", s.image));
      break;
    case RETURN:
      t = jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case INT:
      case VOID:
      case IDENTIFIER:
      case 29:
      case 35:
        Expression();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      s = jj_consume_token(28);
                tokenList.add(new SyntaxToken("RETURN", t.image));
                tokenList.add(new SyntaxToken("SEMICOLON", s.image));
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expression() throws ParseException {
    if (jj_2_5(2147483647)) {
      Variable();
      AssignmentOperator();
      Expression();
    } else if (jj_2_6(2147483647)) {
      Negation();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case INT:
      case VOID:
      case IDENTIFIER:
      case 29:
        LogicalORExpression();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Negation() throws ParseException {
                   Token t;
    t = jj_consume_token(35);
                tokenList.add(new SyntaxToken("NEGATION", t.image));
    Expression();
  }

  static final public void Variable() throws ParseException {
                   Token i;
    if (jj_2_7(2147483647)) {
      TypeSpecifier();
    } else {
      ;
    }
    i = jj_consume_token(IDENTIFIER);
         tokenList.add(new SyntaxToken("IDENTIFIER", i.image));
  }

  static final public void AssignmentOperator() throws ParseException {
                             Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 36:
      t = jj_consume_token(36);
         tokenList.add(new SyntaxToken("ASSIGNMENTOP", t.image));
      break;
    case 37:
      t = jj_consume_token(37);
         tokenList.add(new SyntaxToken("ASSIGNMENTOP", t.image));
      break;
    case 38:
      t = jj_consume_token(38);
         tokenList.add(new SyntaxToken("ASSIGNMENTOP", t.image));
      break;
    case 39:
      t = jj_consume_token(39);
         tokenList.add(new SyntaxToken("ASSIGNMENTOP", t.image));
      break;
    case 40:
      t = jj_consume_token(40);
         tokenList.add(new SyntaxToken("ASSIGNMENTOP", t.image));
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//Boolean Operations have lower precedence than Mathematical Operations so they are higher in the parse tree

//Boolean Operations: Order of precedence (low to high): || -> && -> | -> ^ -> & -> == or != -> <, >, <=, or >=
  static final public void LogicalORExpression() throws ParseException {
                              Token t;
    LogicalANDExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      t = jj_consume_token(41);
                tokenList.add(new SyntaxToken("LOGICOP", t.image));
      LogicalORExpression();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  static final public void LogicalANDExpression() throws ParseException {
                               Token t;
    InclusiveORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      t = jj_consume_token(42);
                tokenList.add(new SyntaxToken("LOGICOP", t.image));
      LogicalANDExpression();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  static final public void InclusiveORExpression() throws ParseException {
                                Token t;
    ExclusiveORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      t = jj_consume_token(43);
                tokenList.add(new SyntaxToken("BINARYOP", t.image));
      InclusiveORExpression();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

  static final public void ExclusiveORExpression() throws ParseException {
                                Token t;
    ANDExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
      t = jj_consume_token(44);
                tokenList.add(new SyntaxToken("BINARYOP", t.image));
      ExclusiveORExpression();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  static final public void ANDExpression() throws ParseException {
                        Token t;
    EqualityExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      t = jj_consume_token(45);
                tokenList.add(new SyntaxToken("BINARYOP", t.image));
      ANDExpression();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

  static final public void EqualityExpression() throws ParseException {
                             Token t;
    RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
    case 47:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
        t = jj_consume_token(46);
         tokenList.add(new SyntaxToken("RELOP", t.image));
        break;
      case 47:
        t = jj_consume_token(47);
         tokenList.add(new SyntaxToken("RELOP", t.image));
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  static final public void RelationalExpression() throws ParseException {
                               Token t;
    ShiftExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 48:
    case 49:
    case 50:
    case 51:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 48:
        t = jj_consume_token(48);
         tokenList.add(new SyntaxToken("RELOP", t.image));
        break;
      case 49:
        t = jj_consume_token(49);
         tokenList.add(new SyntaxToken("RELOP", t.image));
        break;
      case 50:
        t = jj_consume_token(50);
         tokenList.add(new SyntaxToken("RELOP", t.image));
        break;
      case 51:
        t = jj_consume_token(51);
         tokenList.add(new SyntaxToken("RELOP", t.image));
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      RelationalExpression();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

//End of Booleans

//Mathematical Operations: Order of precedence (low to high): >> or << -> + or - -> *, /, or %
  static final public void ShiftExpression() throws ParseException {
                          Token l; Token r;
    AdditiveExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 52:
    case 53:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        l = jj_consume_token(52);
         tokenList.add(new SyntaxToken("LSHIFT", l.image));
        break;
      case 53:
        r = jj_consume_token(53);
         tokenList.add(new SyntaxToken("RSHIFT", r.image));
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ShiftExpression();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

  static final public void AdditiveExpression() throws ParseException {
                             Token t;
    MultiplicativeExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
    case 55:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        t = jj_consume_token(54);
         tokenList.add(new SyntaxToken("ADDOP", t.image));
        break;
      case 55:
        t = jj_consume_token(55);
         tokenList.add(new SyntaxToken("ADDOP", t.image));
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      AdditiveExpression();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
  }

  static final public void MultiplicativeExpression() throws ParseException {
                                   Token t;
    Factor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
    case 57:
    case 58:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 56:
        t = jj_consume_token(56);
         tokenList.add(new SyntaxToken("MULOP", t.image));
        break;
      case 57:
        t = jj_consume_token(57);
         tokenList.add(new SyntaxToken("MULOP", t.image));
        break;
      case 58:
        t = jj_consume_token(58);
         tokenList.add(new SyntaxToken("MULOP",t.image));
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

  static final public void Factor() throws ParseException {
                 Token l; Token r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      l = jj_consume_token(29);
      LogicalORExpression();
      r = jj_consume_token(30);
                tokenList.add(new SyntaxToken("LPAREN", l.image));
                tokenList.add(new SyntaxToken("RPAREN", r.image));
      break;
    default:
      jj_la1[30] = jj_gen;
      if (jj_2_8(2147483647)) {
        Call();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case VOID:
        case IDENTIFIER:
          Variable();
          break;
        case INTEGER_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          Constant();
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void Call() throws ParseException {
               Token t; Token l; Token r;
    t = jj_consume_token(IDENTIFIER);
    l = jj_consume_token(29);
    Args();
    r = jj_consume_token(30);
                tokenList.add(new SyntaxToken("IDENTIFIER", t.image));
                tokenList.add(new SyntaxToken("LPAREN", l.image));
                tokenList.add(new SyntaxToken("RPAREN", r.image));
  }

  static final public void Args() throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case INT:
      case VOID:
      case IDENTIFIER:
      case 29:
      case 35:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_6;
      }
      Expression();
    }
  }

  static final public void Constant() throws ParseException {
                   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                tokenList.add(new SyntaxToken("INTEGER_LITERAL", t.image));
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
                tokenList.add(new SyntaxToken("CHARACTER_LITERAL", t.image));
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                tokenList.add(new SyntaxToken("STRING_LITERAL", t.image));
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3R_52() {
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(28)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(37)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_11()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(35)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_11()) return true;
    if (jj_3R_12()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(GOTO)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(29)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    }
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_72()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    }
    }
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(46)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_62()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(45)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(47)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1800000,0x1800000,0x1800000,0x1800000,0x80000000,0x1800000,0x1800000,0x1800000,0x33cff000,0x33cff000,0x23807000,0x23807000,0x458000,0x23807000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x3807000,0x23807000,0x7000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x9,0x8,0x8,0x0,0x0,0x1f0,0x200,0x400,0x800,0x1000,0x2000,0xc000,0xc000,0xf0000,0xf0000,0x300000,0x300000,0xc00000,0xc00000,0x7000000,0x7000000,0x0,0x0,0x8,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Compiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compiler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Compiler(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Compiler(CompilerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
